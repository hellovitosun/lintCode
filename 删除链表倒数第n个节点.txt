给定一个链表，删除链表中倒数第n个节点，返回链表的头节点。



您在真实的面试中是否遇到过这个题？ Yes
样例
给出链表1->2->3->4->5->null和 n = 2.

删除倒数第二个节点之后，这个链表将变成1->2->3->5->null.

注意
链表中的节点个数大于等于n

挑战
O(n)时间复杂度

思路：设置两个指针，第一个先往前n-1步，然后第二个开始移动，直到第一个移动到最后一个节点时，第二个指针指向的即是倒数第n个指针，但是如果删除该节点，
则需要找到该节点的前一个，为了只遍历一次，第一个指针往前移动n步后，第二个指针再开始移动。
需要注意的几点：1、如果链表为空，且n小于0时，返回头节点。
                2、当n大于节点个数时，如果是查找该节点，则返回null，如果是删除节点，则不删除任何节点返回原链表头节点。
                3、当链表中只有一个节点且要删除该节点时，返回null。
              
/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param head: The first node of linked list.
     * @param n: An integer.
     * @return: The head of linked list.
     */
    ListNode removeNthFromEnd(ListNode head, int n) {
        // write your code here
        if(null == head || n <= 0) return head;
        ListNode myhead = head, tail = head;
        while(n > 0 && tail.next != null){
            tail = tail.next;
            n--;
        }
        if(n > 1) return head;//n > sizeOfList
        if(n == 1 && tail.next == null) return head.next;
        while(tail.next != null ){
            myhead = myhead.next;
            tail = tail.next;
        }
        myhead.next = myhead.next.next;
        return head;
    }
}

