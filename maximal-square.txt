问题
Given a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area.

样例
For example, given the following matrix:

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
Return 4.

public class Solution {
    /**
     * @param matrix: a matrix of 0 and 1
     * @return: an integer
     */
    public int maxSquare(int[][] matrix) {
        // write your code here
        
        if (matrix.length==0){
            return 0;
        }
        int[][] dp=new int[matrix.length][matrix[0].length];
        int ans=0;
        for (int i=0;i<matrix.length;i++){
            for (int j = 0;j<matrix[i].length;j++){
                
                dp[i][j]=matrix[i][j];
                if (i>0&&j>0&&dp[i][j]==1){
                    //dp[i][j]=min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1
                    List<Integer> temp=new ArrayList<Integer>();
                    temp.add(dp[i-1][j]);
                    temp.add(dp[i][j-1]);
                    temp.add(dp[i-1][j-1]);
                    dp[i][j]= Collections.min(temp)+1;
                }
                ans=(ans>dp[i][j])?ans:dp[i][j];
            }
        }
        return ans*ans;
    }
}
//这道题使用动态规划，状态转移方程为dp[i][j]=min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1
//其中dp[i][j]为以dp[i][j]为右下角的正方形的边长