容易 岛屿的个数

给一个01矩阵，求不同的岛屿的个数。

0代表海，1代表岛，如果两个1相邻，那么这两个1属于同一个岛。我们只考虑上下左右为相邻。

样例
在矩阵：

[
  [1, 1, 0, 0, 0],
  [0, 1, 0, 0, 1],
  [0, 0, 0, 1, 1],
  [0, 0, 0, 0, 0],
  [0, 0, 0, 0, 1]
]
中有 3 个岛.

思路：八连块问题，递归深度遍历。若该点为true，则递归访问该点周围也为true的点，并将其设置为false，也可以增加一个visit矩阵来记录
访问过的点。

public class Solution {
    /**
     * @param grid a boolean 2D matrix
     * @return an integer
     */
    public int numIslands(boolean[][] grid) {
        // Write your code here
        int count=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                if(grid[i][j]==true){
                    count++;
                    visit(grid,i,j);
                }
            }
        }
        return count;
    }
    public boolean[][] visit(boolean [][] grid,int i,int j){
        //递归访问，将该点周围的点设置为false
        
        grid[i][j]=false;
        
        //修改上边的
        if(i>0&&grid[i-1][j]==true){
            visit(grid,i-1,j);
        }
        //修改右边的
        if(j<grid[i].length-1&&grid[i][j+1]==true){
            visit(grid,i,j+1);
        }
        //修改下边的
        if(i<grid.length-1&&grid[i+1][j]==true){
            visit(grid,i+1,j);
        }
        //修改左边的
        if(j>0&&grid[i][j-1]==true){
            visit(grid,i,j-1);
        }
        return grid;
        
    }
}
