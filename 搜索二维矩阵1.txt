写出一个高效的算法来搜索 m × n矩阵中的值。

这个矩阵具有以下特性：

每行中的整数从左到右是排序的。
每行的第一个数大于上一行的最后一个整数。
您在真实的面试中是否遇到过这个题？ Yes
样例
考虑下列矩阵：

[
  [1, 3, 5, 7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
给出 target = 3，返回 true

挑战
O(log(n) + log(m)) 时间复杂度

思路：从矩阵的右上角开始，如果目标元素小于该元素，则说明该列的所有元素均大于目标元素，剔除该列；如果目标元素大于该元素，则说明目标元素在该元素的右下方，因为右边
的列已经剔除，所以目标元素在该元素所在行的下方，于是剔除该行，减小搜索范围，直到找到目标元素。

public class Solution {
    /**
     * @param matrix, a list of lists of integers
     * @param target, an integer
     * @return a boolean, indicate whether matrix contains target
     */
    public boolean searchMatrix(int[][] matrix, int target) {
        // write your code here
        boolean found = false;
        int rows = matrix.length;
        if(rows>0){
            int columns = matrix[0].length;
            
            if(rows>0 && columns>0){
                int row = 0;
                int column = columns - 1;
                while(row<rows && column>=0){
                    
                    if(target == matrix[row][column]){
                        found = true ;
                        break ;
                    }else if(target < matrix[row][column]){
                        column -- ;
                    }else{
                        row ++ ;
                    }
                    
                }
            }
        }
        return found;
    }
}

